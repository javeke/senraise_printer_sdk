// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.wipaytoday.senraise_sdk;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class SenraiseSdkHostApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PrintLine {
    private @Nullable Boolean isBitMap;

    public @Nullable Boolean getIsBitMap() {
      return isBitMap;
    }

    public void setIsBitMap(@Nullable Boolean setterArg) {
      this.isBitMap = setterArg;
    }

    private @Nullable Boolean isText;

    public @Nullable Boolean getIsText() {
      return isText;
    }

    public void setIsText(@Nullable Boolean setterArg) {
      this.isText = setterArg;
    }

    private @Nullable Boolean isTableRow;

    public @Nullable Boolean getIsTableRow() {
      return isTableRow;
    }

    public void setIsTableRow(@Nullable Boolean setterArg) {
      this.isTableRow = setterArg;
    }

    private @Nullable List<String> rowData;

    public @Nullable List<String> getRowData() {
      return rowData;
    }

    public void setRowData(@Nullable List<String> setterArg) {
      this.rowData = setterArg;
    }

    private @Nullable int[] weights;

    public @Nullable int[] getWeights() {
      return weights;
    }

    public void setWeights(@Nullable int[] setterArg) {
      this.weights = setterArg;
    }

    private @Nullable int[] alignments;

    public @Nullable int[] getAlignments() {
      return alignments;
    }

    public void setAlignments(@Nullable int[] setterArg) {
      this.alignments = setterArg;
    }

    private @Nullable String text;

    public @Nullable String getText() {
      return text;
    }

    public void setText(@Nullable String setterArg) {
      this.text = setterArg;
    }

    private @Nullable byte[] bitMap;

    public @Nullable byte[] getBitMap() {
      return bitMap;
    }

    public void setBitMap(@Nullable byte[] setterArg) {
      this.bitMap = setterArg;
    }

    private @Nullable Double fontSize;

    public @Nullable Double getFontSize() {
      return fontSize;
    }

    public void setFontSize(@Nullable Double setterArg) {
      this.fontSize = setterArg;
    }

    /**
     * 
     * 0 - LEFT, 1 - CENTER, 2 - RIGHT
     *
     */
    private @Nullable Long alignment;

    public @Nullable Long getAlignment() {
      return alignment;
    }

    public void setAlignment(@Nullable Long setterArg) {
      this.alignment = setterArg;
    }

    private @Nullable Boolean isBold;

    public @Nullable Boolean getIsBold() {
      return isBold;
    }

    public void setIsBold(@Nullable Boolean setterArg) {
      this.isBold = setterArg;
    }

    private @Nullable Boolean nextLine;

    public @Nullable Boolean getNextLine() {
      return nextLine;
    }

    public void setNextLine(@Nullable Boolean setterArg) {
      this.nextLine = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PrintLine that = (PrintLine) o;
      return Objects.equals(isBitMap, that.isBitMap) && Objects.equals(isText, that.isText) && Objects.equals(isTableRow, that.isTableRow) && Objects.equals(rowData, that.rowData) && Arrays.equals(weights, that.weights) && Arrays.equals(alignments, that.alignments) && Objects.equals(text, that.text) && Arrays.equals(bitMap, that.bitMap) && Objects.equals(fontSize, that.fontSize) && Objects.equals(alignment, that.alignment) && Objects.equals(isBold, that.isBold) && Objects.equals(nextLine, that.nextLine);
    }

    @Override
    public int hashCode() {
      int pigeonVar_result = Objects.hash(isBitMap, isText, isTableRow, rowData, text, fontSize, alignment, isBold, nextLine);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(weights);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(alignments);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(bitMap);
      return pigeonVar_result;
    }

    public static final class Builder {

      private @Nullable Boolean isBitMap;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsBitMap(@Nullable Boolean setterArg) {
        this.isBitMap = setterArg;
        return this;
      }

      private @Nullable Boolean isText;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsText(@Nullable Boolean setterArg) {
        this.isText = setterArg;
        return this;
      }

      private @Nullable Boolean isTableRow;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsTableRow(@Nullable Boolean setterArg) {
        this.isTableRow = setterArg;
        return this;
      }

      private @Nullable List<String> rowData;

      @CanIgnoreReturnValue
      public @NonNull Builder setRowData(@Nullable List<String> setterArg) {
        this.rowData = setterArg;
        return this;
      }

      private @Nullable int[] weights;

      @CanIgnoreReturnValue
      public @NonNull Builder setWeights(@Nullable int[] setterArg) {
        this.weights = setterArg;
        return this;
      }

      private @Nullable int[] alignments;

      @CanIgnoreReturnValue
      public @NonNull Builder setAlignments(@Nullable int[] setterArg) {
        this.alignments = setterArg;
        return this;
      }

      private @Nullable String text;

      @CanIgnoreReturnValue
      public @NonNull Builder setText(@Nullable String setterArg) {
        this.text = setterArg;
        return this;
      }

      private @Nullable byte[] bitMap;

      @CanIgnoreReturnValue
      public @NonNull Builder setBitMap(@Nullable byte[] setterArg) {
        this.bitMap = setterArg;
        return this;
      }

      private @Nullable Double fontSize;

      @CanIgnoreReturnValue
      public @NonNull Builder setFontSize(@Nullable Double setterArg) {
        this.fontSize = setterArg;
        return this;
      }

      private @Nullable Long alignment;

      @CanIgnoreReturnValue
      public @NonNull Builder setAlignment(@Nullable Long setterArg) {
        this.alignment = setterArg;
        return this;
      }

      private @Nullable Boolean isBold;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsBold(@Nullable Boolean setterArg) {
        this.isBold = setterArg;
        return this;
      }

      private @Nullable Boolean nextLine;

      @CanIgnoreReturnValue
      public @NonNull Builder setNextLine(@Nullable Boolean setterArg) {
        this.nextLine = setterArg;
        return this;
      }

      public @NonNull PrintLine build() {
        PrintLine pigeonReturn = new PrintLine();
        pigeonReturn.setIsBitMap(isBitMap);
        pigeonReturn.setIsText(isText);
        pigeonReturn.setIsTableRow(isTableRow);
        pigeonReturn.setRowData(rowData);
        pigeonReturn.setWeights(weights);
        pigeonReturn.setAlignments(alignments);
        pigeonReturn.setText(text);
        pigeonReturn.setBitMap(bitMap);
        pigeonReturn.setFontSize(fontSize);
        pigeonReturn.setAlignment(alignment);
        pigeonReturn.setIsBold(isBold);
        pigeonReturn.setNextLine(nextLine);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(12);
      toListResult.add(isBitMap);
      toListResult.add(isText);
      toListResult.add(isTableRow);
      toListResult.add(rowData);
      toListResult.add(weights);
      toListResult.add(alignments);
      toListResult.add(text);
      toListResult.add(bitMap);
      toListResult.add(fontSize);
      toListResult.add(alignment);
      toListResult.add(isBold);
      toListResult.add(nextLine);
      return toListResult;
    }

    static @NonNull PrintLine fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PrintLine pigeonResult = new PrintLine();
      Object isBitMap = pigeonVar_list.get(0);
      pigeonResult.setIsBitMap((Boolean) isBitMap);
      Object isText = pigeonVar_list.get(1);
      pigeonResult.setIsText((Boolean) isText);
      Object isTableRow = pigeonVar_list.get(2);
      pigeonResult.setIsTableRow((Boolean) isTableRow);
      Object rowData = pigeonVar_list.get(3);
      pigeonResult.setRowData((List<String>) rowData);
      Object weights = pigeonVar_list.get(4);
      pigeonResult.setWeights((int[]) weights);
      Object alignments = pigeonVar_list.get(5);
      pigeonResult.setAlignments((int[]) alignments);
      Object text = pigeonVar_list.get(6);
      pigeonResult.setText((String) text);
      Object bitMap = pigeonVar_list.get(7);
      pigeonResult.setBitMap((byte[]) bitMap);
      Object fontSize = pigeonVar_list.get(8);
      pigeonResult.setFontSize((Double) fontSize);
      Object alignment = pigeonVar_list.get(9);
      pigeonResult.setAlignment((Long) alignment);
      Object isBold = pigeonVar_list.get(10);
      pigeonResult.setIsBold((Boolean) isBold);
      Object nextLine = pigeonVar_list.get(11);
      pigeonResult.setNextLine((Boolean) nextLine);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PrintData {
    private @NonNull List<PrintLine> lines;

    public @NonNull List<PrintLine> getLines() {
      return lines;
    }

    public void setLines(@NonNull List<PrintLine> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"lines\" is null.");
      }
      this.lines = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PrintData() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      PrintData that = (PrintData) o;
      return lines.equals(that.lines);
    }

    @Override
    public int hashCode() {
      return Objects.hash(lines);
    }

    public static final class Builder {

      private @Nullable List<PrintLine> lines;

      @CanIgnoreReturnValue
      public @NonNull Builder setLines(@NonNull List<PrintLine> setterArg) {
        this.lines = setterArg;
        return this;
      }

      public @NonNull PrintData build() {
        PrintData pigeonReturn = new PrintData();
        pigeonReturn.setLines(lines);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(lines);
      return toListResult;
    }

    static @NonNull PrintData fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      PrintData pigeonResult = new PrintData();
      Object lines = pigeonVar_list.get(0);
      pigeonResult.setLines((List<PrintLine>) lines);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return PrintLine.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PrintData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PrintLine) {
        stream.write(129);
        writeValue(stream, ((PrintLine) value).toList());
      } else if (value instanceof PrintData) {
        stream.write(130);
        writeValue(stream, ((PrintData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface IHostApi {

    void printText(@NonNull String text);

    void printImage(@NonNull byte[] bytes);

    void printPage(@NonNull PrintData page);

    void printTestPage();

    void setTextSize(@NonNull Double textSize);

    void setLineHeight(@NonNull Double lineHeight);

    void print128BarCode(@NonNull String data, @NonNull Long type, @NonNull Long height, @NonNull Long width);

    void setTextDoubleWidth(@NonNull Boolean enable);

    void setTextDoubleHeight(@NonNull Boolean enable);

    void printEpson(@NonNull byte[] data);

    void setAlignment(@NonNull Long alignment);

    void nextLine(@NonNull Long line);

    void printTableText(@NonNull List<String> text, @NonNull List<Long> weight, @NonNull List<Long> alignment);

    void setTextBold(@NonNull Boolean bold);

    /** The codec used by IHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `IHostApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable IHostApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable IHostApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.printText" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String textArg = (String) args.get(0);
                try {
                  api.printText(textArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.printImage" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] bytesArg = (byte[]) args.get(0);
                try {
                  api.printImage(bytesArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.printPage" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PrintData pageArg = (PrintData) args.get(0);
                try {
                  api.printPage(pageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.printTestPage" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.printTestPage();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.setTextSize" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double textSizeArg = (Double) args.get(0);
                try {
                  api.setTextSize(textSizeArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.setLineHeight" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Double lineHeightArg = (Double) args.get(0);
                try {
                  api.setLineHeight(lineHeightArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.print128BarCode" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String dataArg = (String) args.get(0);
                Long typeArg = (Long) args.get(1);
                Long heightArg = (Long) args.get(2);
                Long widthArg = (Long) args.get(3);
                try {
                  api.print128BarCode(dataArg, typeArg, heightArg, widthArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.setTextDoubleWidth" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enableArg = (Boolean) args.get(0);
                try {
                  api.setTextDoubleWidth(enableArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.setTextDoubleHeight" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enableArg = (Boolean) args.get(0);
                try {
                  api.setTextDoubleHeight(enableArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.printEpson" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                byte[] dataArg = (byte[]) args.get(0);
                try {
                  api.printEpson(dataArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.setAlignment" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long alignmentArg = (Long) args.get(0);
                try {
                  api.setAlignment(alignmentArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.nextLine" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Long lineArg = (Long) args.get(0);
                try {
                  api.nextLine(lineArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.printTableText" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<String> textArg = (List<String>) args.get(0);
                List<Long> weightArg = (List<Long>) args.get(1);
                List<Long> alignmentArg = (List<Long>) args.get(2);
                try {
                  api.printTableText(textArg, weightArg, alignmentArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.senraise_sdk.IHostApi.setTextBold" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean boldArg = (Boolean) args.get(0);
                try {
                  api.setTextBold(boldArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
